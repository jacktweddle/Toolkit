import unittest
import unit_conversions as uc
import numpy as np

test_arr = np.array([-300, 0, 1])

class TestConversion(unittest.TestCase):
    
    def test_temp(self):
        self.assertEqual(uc.cel_to_K(0), 273.15)
        self.assertEqual(uc.K_to_cel(0), -273.15)
        self.assertEqual(len(test_arr), len(uc.cel_to_K((test_arr))))
        self.assertEqual(len(test_arr), len(uc.K_to_cel((test_arr))))
        self.assertEqual(uc.cel_to_K(test_arr[2]), 274.15)
        self.assertEqual(uc.K_to_cel(test_arr[2]), -272.15)
        self.assertRaises(ValueError, uc.cel_to_K, test_arr[0])
        self.assertRaises(ValueError, uc.K_to_cel, test_arr[0])
        self.assertRaises(ValueError, uc.cel_to_K, -300)
        self.assertRaises(ValueError, uc.K_to_cel, -1)
        self.assertRaises(TypeError, uc.K_to_cel, None)
        self.assertRaises(TypeError, uc.cel_to_K, None)

    def test_dosage(self):
        self.assertEqual(uc.rem_to_sv(100), 1)
        self.assertEqual(uc.sv_to_rem(1), 100)
        self.assertEqual(len(test_arr), len(uc.rem_to_sv((test_arr))))
        self.assertEqual(len(test_arr), len(uc.sv_to_rem((test_arr))))
        self.assertEqual(uc.rem_to_sv(test_arr[2]), 0.01)
        self.assertEqual(uc.sv_to_rem(test_arr[2]), 100)
        self.assertRaises(ValueError, uc.rem_to_sv, test_arr[0])
        self.assertRaises(ValueError, uc.sv_to_rem, test_arr[0])
        self.assertRaises(ValueError, uc.rem_to_sv, -1)
        self.assertRaises(ValueError, uc.sv_to_rem, -1)
        self.assertRaises(TypeError, uc.rem_to_sv, None)
        self.assertRaises(TypeError, uc.sv_to_rem, None)

    def test_activity(self):
        self.assertEqual(uc.curie_to_bq(1), 3.7E10)
        self.assertEqual(uc.bq_to_curie(3.7E10), 1)
        self.assertEqual(len(test_arr), len(uc.curie_to_bq((test_arr))))
        self.assertEqual(len(test_arr), len(uc.bq_to_curie((test_arr))))
        self.assertEqual(uc.curie_to_bq(test_arr[2]), 3.7E10)
        self.assertEqual(uc.bq_to_curie(test_arr[2]), 1/3.7E10)
        self.assertRaises(ValueError, uc.curie_to_bq, test_arr[0])
        self.assertRaises(ValueError, uc.bq_to_curie, test_arr[0])
        self.assertRaises(ValueError, uc.curie_to_bq, -1)
        self.assertRaises(ValueError, uc.bq_to_curie, -1)
        self.assertRaises(TypeError, uc.curie_to_bq, None)
        self.assertRaises(TypeError, uc.bq_to_curie, None)

    def test_time(self):
        self.assertEqual(uc.seconds_to_minutes(60), 1)
        self.assertEqual(uc.seconds_to_hours(3600), 1)
        self.assertEqual(uc.seconds_to_days(86400), 1)
        self.assertEqual(uc.seconds_to_years(31557600), 1)
        self.assertEqual(uc.years_to_days(1), 365.25)
        self.assertEqual(uc.years_to_hours(1), 8766)
        self.assertEqual(uc.years_to_minutes(1), 525960)
        self.assertEqual(uc.years_to_seconds(1), 31557600)
        self.assertEqual(len(test_arr), len(uc.seconds_to_minutes((test_arr))))
        self.assertEqual(len(test_arr), len(uc.seconds_to_hours((test_arr))))
        self.assertEqual(len(test_arr), len(uc.seconds_to_days((test_arr))))
        self.assertEqual(len(test_arr), len(uc.seconds_to_years((test_arr))))
        self.assertEqual(len(test_arr), len(uc.years_to_days((test_arr))))
        self.assertEqual(len(test_arr), len(uc.years_to_hours((test_arr))))
        self.assertEqual(len(test_arr), len(uc.years_to_minutes((test_arr))))
        self.assertEqual(len(test_arr), len(uc.years_to_seconds((test_arr))))
        self.assertEqual(uc.seconds_to_minutes(test_arr[2]), 1/60)
        self.assertEqual(uc.seconds_to_hours(test_arr[2]), 1/(60*60))
        self.assertEqual(uc.seconds_to_days(test_arr[2]), 1/(24*60*60))
        self.assertEqual(uc.seconds_to_years(test_arr[2]), 1/(365.25*24*60*60))
        self.assertEqual(uc.years_to_days(test_arr[2]), 365.25)
        self.assertEqual(uc.years_to_hours(test_arr[2]), 365.25*24)
        self.assertEqual(uc.years_to_minutes(test_arr[2]), 365.25*24*60)
        self.assertEqual(uc.years_to_seconds(test_arr[2]), 365.25*24*60*60)
        self.assertRaises(ValueError, uc.seconds_to_minutes, test_arr[0])
        self.assertRaises(ValueError, uc.seconds_to_hours, test_arr[0])
        self.assertRaises(ValueError, uc.seconds_to_days, test_arr[0])
        self.assertRaises(ValueError, uc.seconds_to_years, test_arr[0])
        self.assertRaises(ValueError, uc.years_to_days, test_arr[0])
        self.assertRaises(ValueError, uc.years_to_hours, test_arr[0])
        self.assertRaises(ValueError, uc.years_to_minutes, test_arr[0])
        self.assertRaises(ValueError, uc.years_to_seconds, test_arr[0])
        self.assertRaises(ValueError, uc.seconds_to_minutes, -1)
        self.assertRaises(ValueError, uc.seconds_to_hours, -1)
        self.assertRaises(ValueError, uc.seconds_to_days, -1)
        self.assertRaises(ValueError, uc.seconds_to_years, -1)
        self.assertRaises(ValueError, uc.years_to_days, -1)
        self.assertRaises(ValueError, uc.years_to_hours, -1)
        self.assertRaises(ValueError, uc.years_to_minutes, -1)
        self.assertRaises(ValueError, uc.years_to_seconds, -1)
        self.assertRaises(TypeError, uc.seconds_to_minutes, None)
        self.assertRaises(TypeError, uc.seconds_to_hours, None)
        self.assertRaises(TypeError, uc.seconds_to_days, None)
        self.assertRaises(TypeError, uc.seconds_to_years, None)
        self.assertRaises(TypeError, uc.years_to_days, None)
        self.assertRaises(TypeError, uc.years_to_hours, None)
        self.assertRaises(TypeError, uc.years_to_minutes, None)
        self.assertRaises(TypeError, uc.years_to_seconds, None)

    def test_energy(self):
        self.assertEqual(uc.ev_to_joule(1/1.602E-19), 1)
        self.assertEqual(uc.joule_to_ev(1), 1/1.602E-19)
        self.assertEqual(len(test_arr), len(uc.ev_to_joule((test_arr))))
        self.assertEqual(len(test_arr), len(uc.joule_to_ev((test_arr))))
        self.assertEqual(uc.ev_to_joule(test_arr[2]), 1.602E-19)
        self.assertEqual(uc.joule_to_ev(test_arr[2]), 1/1.602E-19)
        self.assertRaises(ValueError, uc.ev_to_joule, test_arr[0])
        self.assertRaises(ValueError, uc.joule_to_ev, test_arr[0])
        self.assertRaises(ValueError, uc.ev_to_joule, -1)
        self.assertRaises(ValueError, uc.joule_to_ev, -1)
        self.assertRaises(TypeError, uc.ev_to_joule, None)
        self.assertRaises(TypeError, uc.joule_to_ev, None)


if __name__ == '__main__':
    unittest.main()